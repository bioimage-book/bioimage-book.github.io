# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022-2024
# This file is distributed under the same license as the bioimage-book package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Beth Cimini, 2024
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: bioimage-book\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-02-05 16:49+0000\n"
"PO-Revision-Date: 2024-02-05 21:49+0000\n"
"Last-Translator: Beth Cimini, 2024\n"
"Language-Team: Spanish (https://app.transifex.com/center-for-open-bioimage-analysis/teams/169123/es/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: es\n"
"Plural-Forms: nplurals=3; plural=n == 1 ? 0 : n != 0 && n % 1000000 == 0 ? 1 : 2;\n"

#: ../../../chapters/1-concepts/3-bit_depths/python.md:15
msgid "Python: Types & bit-depths"
msgstr "Python: Tipos y profundidad de bits"

#: ../../../chapters/1-concepts/3-bit_depths/python.md:17
msgid ""
"In this section, we will explore how bit-depths and image types are "
"represented in Python. We'll look in particular at where things can go wrong"
" when converting between bit-depths, and how to apply the tricks from "
"previous chapters to identify problems."
msgstr ""
"En esta sección exploraremos cómo se representan en Python las profundidades"
" de bits y los tipos de imagen. Veremos en particular dónde pueden salir mal"
" las cosas al convertir entre profundidades de bits, y cómo aplicar los "
"trucos de los capítulos anteriores para identificar problemas."

#: ../../../chapters/1-concepts/3-bit_depths/python.md:30
msgid "Bit-depths and dtype"
msgstr "Profundidad de bits y dtype"

#: ../../../chapters/1-concepts/3-bit_depths/python.md:32
msgid ""
"The bit-depth of a **NumPy array** is encoded in its **data type** - or "
"**dtype** for short."
msgstr ""
"La profundidad de bits de una matriz **NumPy** está codificada en su **tipo "
"de datos** - o **tipo de datos** para abreviar."

#: ../../../chapters/1-concepts/3-bit_depths/python.md:34
msgid ""
"ImageJ is focussed on on 8-bit and 16-bit unsigned integer images, as well "
"as 32-bit floating point images."
msgstr ""
"ImageJ se centra en imágenes de enteros sin signo de 8 y 16 bits, así como "
"en imágenes de coma flotante de 32 bits."

#: ../../../chapters/1-concepts/3-bit_depths/python.md:36
msgid ""
"NumPy, on the other hand, offers a much wider range of data types. The code "
"for a Numpy dtype isn't hard to crack, with a `uint` standing for 'unsigned "
"integer' and `float` for floating-point."
msgstr ""
"NumPy, por otro lado, ofrece una gama mucho más amplia de tipos de datos. El"
" código para un tipo de dato Numpy no es difícil de descifrar, con `uint` "
"para 'entero sin signo' y `float` para punto flotante."

#: ../../../chapters/1-concepts/3-bit_depths/python.md:0
msgid "Type"
msgstr "Tipo"

#: ../../../chapters/1-concepts/3-bit_depths/python.md:0
msgid "Bit-depth"
msgstr "Profundidad de bits"

#: ../../../chapters/1-concepts/3-bit_depths/python.md:0
msgid "dtype"
msgstr "dtype"

#: ../../../chapters/1-concepts/3-bit_depths/python.md:0
#: ../../../chapters/1-concepts/3-bit_depths/python.md:0
#: ../../../chapters/1-concepts/3-bit_depths/python.md:0
msgid "Unsigned integer"
msgstr "Entero sin signo"

#: ../../../chapters/1-concepts/3-bit_depths/python.md:0
#: ../../../chapters/1-concepts/3-bit_depths/python.md:0
msgid "8"
msgstr "8"

#: ../../../chapters/1-concepts/3-bit_depths/python.md:0
msgid "`uint8`"
msgstr "`uint8`"

#: ../../../chapters/1-concepts/3-bit_depths/python.md:0
#: ../../../chapters/1-concepts/3-bit_depths/python.md:0
#: ../../../chapters/1-concepts/3-bit_depths/python.md:0
msgid "Signed integer"
msgstr "Entero con signo"

#: ../../../chapters/1-concepts/3-bit_depths/python.md:0
msgid "`int8`"
msgstr "`int8`"

#: ../../../chapters/1-concepts/3-bit_depths/python.md:0
#: ../../../chapters/1-concepts/3-bit_depths/python.md:0
msgid "16"
msgstr "16"

#: ../../../chapters/1-concepts/3-bit_depths/python.md:0
msgid "`uint16`"
msgstr "`uint16`"

#: ../../../chapters/1-concepts/3-bit_depths/python.md:0
msgid "`int16`"
msgstr "`int16`"

#: ../../../chapters/1-concepts/3-bit_depths/python.md:0
#: ../../../chapters/1-concepts/3-bit_depths/python.md:0
#: ../../../chapters/1-concepts/3-bit_depths/python.md:0
msgid "32"
msgstr "32"

#: ../../../chapters/1-concepts/3-bit_depths/python.md:0
msgid "`uint32`"
msgstr "`uint32`"

#: ../../../chapters/1-concepts/3-bit_depths/python.md:0
msgid "`int32`"
msgstr "`int32`"

#: ../../../chapters/1-concepts/3-bit_depths/python.md:0
#: ../../../chapters/1-concepts/3-bit_depths/python.md:0
msgid "Floating point"
msgstr "Punto flotante"

#: ../../../chapters/1-concepts/3-bit_depths/python.md:0
msgid "`float32`"
msgstr "`float32`"

#: ../../../chapters/1-concepts/3-bit_depths/python.md:0
msgid "64"
msgstr "64"

#: ../../../chapters/1-concepts/3-bit_depths/python.md:0
msgid "`float64`"
msgstr "`float64`"

#: ../../../chapters/1-concepts/3-bit_depths/python.md:50
msgid "The `dtype` for any array is easy to check:"
msgstr "El `dtype` de cualquier array es fácil de comprobar:"

#: ../../../chapters/1-concepts/3-bit_depths/python.md:58
msgid ""
"We can print some basic statistics, as before. In particular, we can check "
"that the minimum and maximum values fall inside the expected range."
msgstr ""
"Podemos imprimir algunas estadísticas básicas, como antes. En particular, "
"podemos comprobar que los valores mínimo y máximo están dentro del intervalo"
" esperado."

#: ../../../chapters/1-concepts/3-bit_depths/python.md:73
msgid "Fun with float32"
msgstr "Diversión con float32"

#: ../../../chapters/1-concepts/3-bit_depths/python.md:75
msgid "If we want to change the type, that is easy to do as well."
msgstr "Si queremos cambiar el tipo, también es fácil hacerlo."

#: ../../../chapters/1-concepts/3-bit_depths/python.md:77
msgid ""
"This makes use of the line `import numpy as np` to give us access to more "
"NumPy properties & functions."
msgstr ""
"Esto hace uso de la línea `import numpy as np` para darnos acceso a más "
"propiedades y funciones de NumPy."

#: ../../../chapters/1-concepts/3-bit_depths/python.md:83
msgid "This should convert our image into 32-bit floating point."
msgstr "Esto debería convertir nuestra imagen en coma flotante de 32 bits."

#: ../../../chapters/1-concepts/3-bit_depths/python.md:85
msgid ""
"However, when trying out a new command it is always a good idea to check it "
"does what was expected. We can do that by showing the image and printing "
"statistics again."
msgstr ""
"Sin embargo, cuando se prueba un nuevo comando siempre es una buena idea "
"comprobar que hace lo que se esperaba. Podemos hacerlo mostrando la imagen e"
" imprimiendo de nuevo las estadísticas."

#: ../../../chapters/1-concepts/3-bit_depths/python.md:97
msgid ""
"That looks fine to me, but let's be extra careful and have NumPy check if "
"the values are really identical."
msgstr ""
"A mí me parece bien, pero seamos muy cuidadosos y hagamos que NumPy "
"compruebe si los valores son realmente idénticos."

#: ../../../chapters/1-concepts/3-bit_depths/python.md:99
msgid "One way we might do that is with `==`."
msgstr "Una forma de hacerlo es con `==`."

#: ../../../chapters/1-concepts/3-bit_depths/python.md:105
msgid ""
"Hmmm, that looks quite convincing - it gives us an image that has either "
"`True` or `False` for every single pixel. But because of the limits of what "
"is printing, it really only shows that the pixels at the corners of our "
"image match."
msgstr ""
"Hmmm, parece bastante convincente - nos da una imagen que tiene `Verdadero` "
"o `Falso` para cada píxel. Pero debido a los límites de lo que se imprime, "
"en realidad sólo muestra que los píxeles de las esquinas de nuestra imagen "
"coinciden."

#: ../../../chapters/1-concepts/3-bit_depths/python.md:108
msgid ""
"If we want to ensure that *all* pixels are the same, we can use `np.all`"
msgstr ""
"Si queremos asegurarnos de que *todos* los píxeles son iguales, podemos "
"utilizar `np.all`."

#: ../../../chapters/1-concepts/3-bit_depths/python.md:114
msgid "**Success!**"
msgstr "**¡Éxito!**"

#: ../../../chapters/1-concepts/3-bit_depths/python.md:116
msgid ""
"But... skepticism belongs in science - particularly in image analysis - and "
"it's always worth testing things from multiple angles, just in case. So "
"let's check the statistics as well:"
msgstr ""
"Pero... el escepticismo es propio de la ciencia -sobre todo del análisis de "
"imágenes- y siempre merece la pena comprobar las cosas desde varios ángulos,"
" por si acaso. Así que comprobemos también las estadísticas:"

#: ../../../chapters/1-concepts/3-bit_depths/python.md:136
msgid "Uh-oh... that was unexpected."
msgstr "Uh-oh... eso fue inesperado."

#: ../../../chapters/1-concepts/3-bit_depths/python.md:138
msgid ""
"**Somehow, we have two images with exactly the same pixel values - and yet "
"they have a different mean value??!**"
msgstr ""
"**De alguna manera, tenemos dos imágenes con exactamente los mismos valores "
"de píxeles y, sin embargo, tienen un valor medio diferente."

#: ../../../chapters/1-concepts/3-bit_depths/python.md:140
msgid ""
"It doesn't seem to make sense. We need to investigate by printing the actual"
" values:"
msgstr ""
"No parece tener sentido. Tenemos que investigar imprimiendo los valores "
"reales:"

#: ../../../chapters/1-concepts/3-bit_depths/python.md:147
msgid ""
"Ok, so the means are actually very very close - and we need to go a long way"
" after the decimal point before there is a difference."
msgstr ""
"De acuerdo, las medias están muy muy próximas, y tenemos que ir mucho más "
"allá del punto decimal para que haya una diferencia."

#: ../../../chapters/1-concepts/3-bit_depths/python.md:149
msgid "This is an example of a **precision error**."
msgstr "Este es un ejemplo de **error de precisión**."

#: ../../../chapters/1-concepts/3-bit_depths/python.md:151
msgid ""
"Precisions errors are common when coding, and we need to always be on our "
"guard against them. They can occur in the midst of calculations because "
"intermediate results aren't stored with perfect precision, but rather "
"rounded to a value that is close."
msgstr ""
"Los errores de precisión son habituales al programar, y debemos estar "
"siempre en guardia contra ellos. Pueden producirse en medio de los cálculos "
"porque los resultados intermedios no se almacenan con una precisión "
"perfecta, sino que se redondean a un valor cercano."

#: ../../../chapters/1-concepts/3-bit_depths/python.md:154
msgid ""
"This happens both with integer and floating-point types - but of course it "
"is more severe when working with integers. As an illustration using decimal "
"values (since it's harder for most of us to think in binary), let's consider"
" dividing a number by 3 and then multiplying the result by 3. "
"Mathematically, we *should* get the same result."
msgstr ""
"Esto ocurre tanto con los tipos enteros como con los de coma flotante, pero,"
" por supuesto, es más grave cuando se trabaja con enteros. Para ilustrarlo "
"con valores decimales (ya que para la mayoría de nosotros es más difícil "
"pensar en binario), dividamos un número por 3 y multipliquemos el resultado "
"por 3. Matemáticamente, *deberíamos* obtener el mismo resultado."

#: ../../../chapters/1-concepts/3-bit_depths/python.md:158
msgid ""
"However, if we do our calculations using only with integers we instead see"
msgstr ""
"Sin embargo, si realizamos nuestros cálculos utilizando únicamente números "
"enteros, veremos que"

#: ../../../chapters/1-concepts/3-bit_depths/python.md:160
msgid ""
"\n"
"\\begin{align}\n"
"\\frac{10}{3}  & \\approx 3 \\\\\n"
"\\\\\n"
"3 \\times 3  & = 9\n"
"\\end{align}\n"
msgstr ""
"\n"
"\\COMENZAR{align}\n"
"\\frac{10}{3} &amp; \\approx 3 \\frac \n"
"\\\\\n"
"3 veces 3 &amp; = 9\n"
"\\fin{align}\n"

#: ../../../chapters/1-concepts/3-bit_depths/python.md:168
msgid ""
"On the other hand, if we use floating point (to three decimal places for "
"illustration) we would get"
msgstr ""
"Por otro lado, si utilizamos coma flotante (con tres decimales para "
"ilustrar) obtendríamos"

#: ../../../chapters/1-concepts/3-bit_depths/python.md:170
msgid ""
"\n"
"\\begin{align}\n"
"\\frac{10}{3} & \\approx 3.333 \\\\\n"
"\\\\\n"
"3.333 \\times 3 & = 9.999\n"
"\\end{align}\n"
msgstr ""
"\n"
"\\COMENZAR{align}\n"
"\\frac{10}{3} &amp; \\approx 3.333 \\frac \n"
"\\\\\n"
"3.333 veces 3 &amp; = 9.999\n"
"\\fin{align}\n"

#: ../../../chapters/1-concepts/3-bit_depths/python.md:178
msgid ""
"*Neither* gives the mathematically 'correct' final result of 10, because of "
"the precision errors."
msgstr ""
"*Ninguno* da el resultado final matemáticamente \"correcto\" de 10, debido a"
" los errores de precisión."

#: ../../../chapters/1-concepts/3-bit_depths/python.md:180
msgid ""
"Consequently, rather than checking whether non-integer values are identical "
"with one another by using `==`, we often need to check if they are very "
"close to one another. We can use `np.allclose` for that."
msgstr ""
"En consecuencia, en lugar de comprobar si los valores no enteros son "
"idénticos entre sí utilizando `==`, a menudo necesitamos comprobar si están "
"muy próximos entre sí. Para ello podemos utilizar `np.allclose`."

#: ../../../chapters/1-concepts/3-bit_depths/python.md:187
msgid "Towards 8-bit"
msgstr "Hacia los 8 bits"

#: ../../../chapters/1-concepts/3-bit_depths/python.md:189
msgid ""
"Previously, we had an image with a low bit depth and we increased the bit-"
"depth. This was fine."
msgstr ""
"Anteriormente, teníamos una imagen con una profundidad de bits baja y "
"aumentamos la profundidad de bits. Esto estaba bien."

#: ../../../chapters/1-concepts/3-bit_depths/python.md:192
msgid "Time now to go the opposite direction, and again check that it works."
msgstr ""
"Ahora es el momento de ir en la dirección opuesta y comprobar de nuevo que "
"funciona."

#: ../../../chapters/1-concepts/3-bit_depths/python.md:205
msgid "Oh dear. This is categorically **not** all right."
msgstr "Oh, vaya. Esto categóricamente no está bien."

#: ../../../chapters/1-concepts/3-bit_depths/python.md:208
msgid ""
"Our minimum and maximum values are in the range 0-255 - which is all that's "
"permitted in an unsigned integer, 8-bit image, so that makes sense. But the "
"appearance doesn't make much sense at first look."
msgstr ""
"Nuestros valores mínimo y máximo están en el rango 0-255 - que es todo lo "
"que se permite en un entero sin signo, imagen de 8 bits, así que tiene "
"sentido. Pero la apariencia no tiene mucho sentido a primera vista."

#: ../../../chapters/1-concepts/3-bit_depths/python.md:211
msgid ""
"Whenever we reduce the bit-depth of an image, we know that the pixel values "
"will need to fit into the new range. In the main text, we considered two "
"ways that could happen: by clipping or by rescaling."
msgstr ""
"Siempre que reducimos la profundidad de bits de una imagen, sabemos que los "
"valores de los píxeles tendrán que encajar en el nuevo rango. En el texto "
"principal, hemos considerado dos formas de que esto ocurra: por recorte o "
"por reescalado."

#: ../../../chapters/1-concepts/3-bit_depths/python.md:214
msgid ""
"Here, we are meeting a slight idiosyncracy of NumPy that we really need to "
"be careful about: *by default, it will neither clip nor rescale!*"
msgstr ""
"Aquí, nos encontramos con una ligera idiosincrasia de NumPy con la que "
"realmente tenemos que tener cuidado: *por defecto, no recortará ni "
"reescalará!*"

#: ../../../chapters/1-concepts/3-bit_depths/python.md:216
msgid ""
"But what *does* it do? Rather than googling or crawling around the NumPy "
"docs, we can experiment."
msgstr ""
"Pero, ¿qué *hace*? En lugar de buscar en Google o rastrear los documentos de"
" NumPy, podemos experimentar."

#: ../../../chapters/1-concepts/3-bit_depths/python.md:247
msgid ""
"So it seems that NumPy *wraps around*: when converting 256 to `uint8` it "
"becomes 0, 257 becomes 1 and so on."
msgstr ""
"Así que parece que NumPy *envuelve alrededor*: al convertir 256 a `uint8` se"
" convierte en 0, 257 se convierte en 1 y así sucesivamente."

#: ../../../chapters/1-concepts/3-bit_depths/python.md:249
msgid ""
"This means that, to convert an image to `uint8`, we need to take matters "
"into our own hands to reduce data loss. To begin, let's clip."
msgstr ""
"Esto significa que, para convertir una imagen a `uint8`, tenemos que tomar "
"cartas en el asunto para reducir la pérdida de datos. Para empezar, vamos a "
"recortar."

#: ../../../chapters/1-concepts/3-bit_depths/python.md:254
msgid "Converting with clipping"
msgstr "Conversión con recorte"

#: ../../../chapters/1-concepts/3-bit_depths/python.md:256
msgid ""
"The trick is to clip the image this *before* converting it with `astype`:"
msgstr ""
"El truco consiste en recortar la imagen *antes* de convertirla con `astype`:"

#: ../../../chapters/1-concepts/3-bit_depths/python.md:270
msgid ""
"This has worked in a sense, but not a very good one. Our pixels are in the "
"range 0-255, but recall from the histogram above that almost all the pixels "
"were originally above 255 in value. When we clipped, these pixels all simply"
" became 255 - and all further distinction was lost."
msgstr ""
"Esto ha funcionado en cierto sentido, pero no muy bien. Nuestros píxeles "
"están en el rango 0-255, pero recordemos que en el histograma anterior casi "
"todos los píxeles tenían originalmente un valor superior a 255. Cuando "
"recortamos, estos píxeles se convirtieron en 255, y se perdió toda "
"distinción. Cuando recortamos, todos estos píxeles se convirtieron en 255 y "
"se perdió toda distinción."

#: ../../../chapters/1-concepts/3-bit_depths/python.md:276
msgid "Converting with rescaling"
msgstr "Conversión con reescalado"

#: ../../../chapters/1-concepts/3-bit_depths/python.md:278
msgid ""
"We can calculate the maximum possible value of an unsigned integer for a "
"specific bit depth $N$ as $2^{N}-1$."
msgstr ""
"Podemos calcular el valor máximo posible de un entero sin signo para una "
"profundidad de bits específica $N$ como $2^{N}-1$."

#: ../../../chapters/1-concepts/3-bit_depths/python.md:280
msgid "With Numpy, we can use the `**` operator for this."
msgstr "Con Numpy, podemos utilizar el operador `**` para esto."

#: ../../../chapters/1-concepts/3-bit_depths/python.md:290
msgid ""
"Therefore, to convert our 16-bit image to 8-bit by rescaling, we could "
"multiply the pixel values by the ratio of these maximum values, i.e. by "
"$\\frac{255}{65535}$"
msgstr ""
"Por lo tanto, para convertir nuestra imagen de 16 bits a 8 bits mediante "
"reescalado, podríamos multiplicar los valores de los píxeles por el cociente"
" de estos valores máximos, es decir, por $\\frac{255}{65535} $."

#: ../../../chapters/1-concepts/3-bit_depths/python.md:305
msgid ""
"This has *kind of* worked, but note that the maximum pixel value is very "
"low. We have lost a *lot* of information: squeezing our values into a very "
"small range of integers, much less than the full 256 available to us."
msgstr ""
"Esto ha funcionado *más o menos*, pero hay que tener en cuenta que el valor "
"máximo del píxel es muy bajo. Hemos perdido *mucha* información: exprimiendo"
" nuestros valores en un rango muy pequeño de enteros, mucho menos que los "
"256 disponibles."

#: ../../../chapters/1-concepts/3-bit_depths/python.md:308
msgid ""
"Ideally, we would usually like to rescale our image while preserving as much"
" of the information as possible. We would like the values in our output "
"image to fill the full range of 0-255."
msgstr ""
"Lo ideal sería reescalar la imagen conservando la mayor cantidad de "
"información posible. Nos gustaría que los valores de nuestra imagen de "
"salida llenaran todo el rango de 0-255."

#: ../../../chapters/1-concepts/3-bit_depths/python.md:311
msgid "We can do this in five steps:"
msgstr "Podemos hacerlo en cinco pasos:"

#: ../../../chapters/1-concepts/3-bit_depths/python.md:312
msgid ""
"Convert the image to floating point (so that we don't lose info to rounding)"
msgstr ""
"Convertir la imagen a coma flotante (para no perder información por "
"redondeo)"

#: ../../../chapters/1-concepts/3-bit_depths/python.md:313
msgid "Subtract the minimum value, so that the minimum becomes zero"
msgstr "Restar el valor mínimo, para que el mínimo se convierta en cero"

#: ../../../chapters/1-concepts/3-bit_depths/python.md:314
msgid "Divide by the new maximum value, so that the maximum becomes one"
msgstr ""
"Divide por el nuevo valor máximo, de forma que el máximo se convierta en uno"

#: ../../../chapters/1-concepts/3-bit_depths/python.md:315
msgid "Multiply by 255"
msgstr "Multiplicar por 255"

#: ../../../chapters/1-concepts/3-bit_depths/python.md:316
msgid "Convert to 8-bit"
msgstr "Convertir a 8 bits"

#: ../../../chapters/1-concepts/3-bit_depths/python.md:334
msgid ""
"As conversions to 8-bit go, rescaling certainly looks like it was more "
"successful than simply clipping, and the output fills the full range "
"available."
msgstr ""
"En cuanto a las conversiones a 8 bits, el reescalado parece más acertado que"
" el simple recorte, y la salida llena toda la gama disponible."

#: ../../../chapters/1-concepts/3-bit_depths/python.md:336
msgid ""
"Nevertheless, **don't forget that the statistics are different, and we have "
"changed the pixel values!**"
msgstr ""
"No obstante, **no olvides que las estadísticas son diferentes y que hemos "
"cambiado los valores de los píxeles**."

#: ../../../chapters/1-concepts/3-bit_depths/python.md:338
msgid ""
"Therefore this isn't something we should do without a very good reason."
msgstr "Por lo tanto, no es algo que debamos hacer sin una buena razón."

#: ../../../chapters/1-concepts/3-bit_depths/python.md:342
msgid "Summary"
msgstr "Resumen"

#: ../../../chapters/1-concepts/3-bit_depths/python.md:344
msgid ""
"**The key message here is that it is very easy to change the bit-depth and "
"type of an image - but also very easy for things to go wrong.**"
msgstr ""
"**El mensaje clave aquí es que es muy fácil cambiar la profundidad de bits y"
" el tipo de una imagen, pero también es muy fácil que las cosas salgan mal."

#: ../../../chapters/1-concepts/3-bit_depths/python.md:346
msgid ""
"Sometimes these are small precision errors. Sometimes they are big, data, "
"destroying errors."
msgstr ""
"A veces se trata de pequeños errores de precisión. A veces son grandes "
"errores que destruyen datos."

#: ../../../chapters/1-concepts/3-bit_depths/python.md:349
msgid ""
"But if you know how to show images, make measurements and generate "
"histograms, you can always check what is happening to the data at each step."
" This can help you make sure nothing is being lost along the way."
msgstr ""
"Pero si sabes cómo mostrar imágenes, hacer mediciones y generar histogramas,"
" siempre puedes comprobar qué ocurre con los datos en cada paso. Esto puede "
"ayudarte a asegurarte de que no se está perdiendo nada por el camino."
