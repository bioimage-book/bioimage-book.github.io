# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022-2024
# This file is distributed under the same license as the bioimage-book package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Beth Cimini, 2024
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: bioimage-book\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-02-05 16:49+0000\n"
"PO-Revision-Date: 2024-02-05 21:49+0000\n"
"Last-Translator: Beth Cimini, 2024\n"
"Language-Team: Portuguese (Brazil) (https://app.transifex.com/center-for-open-bioimage-analysis/teams/169123/pt_BR/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: pt_BR\n"
"Plural-Forms: nplurals=3; plural=(n == 0 || n == 1) ? 0 : n != 0 && n % 1000000 == 0 ? 1 : 2;\n"

#: ../../../chapters/1-concepts/3-bit_depths/python.md:15
msgid "Python: Types & bit-depths"
msgstr "Python: tipos e profundidade de bits"

#: ../../../chapters/1-concepts/3-bit_depths/python.md:17
msgid ""
"In this section, we will explore how bit-depths and image types are "
"represented in Python. We'll look in particular at where things can go wrong"
" when converting between bit-depths, and how to apply the tricks from "
"previous chapters to identify problems."
msgstr ""
"Nesta seção, exploraremos como a profundidade de bits e os tipos de imagem "
"são representados em Python. Veremos em particular onde as coisas podem dar "
"errado ao converter entre profundidades de bits e como aplicar os truques "
"dos capítulos anteriores para identificar problemas."

#: ../../../chapters/1-concepts/3-bit_depths/python.md:30
msgid "Bit-depths and dtype"
msgstr "Profundidades de bits e dtype"

#: ../../../chapters/1-concepts/3-bit_depths/python.md:32
msgid ""
"The bit-depth of a **NumPy array** is encoded in its **data type** - or "
"**dtype** for short."
msgstr ""
"A profundidade de bits de uma **matriz NumPy** é codificada em seu **tipo de"
" dados** - ou **dtype** para abreviar."

#: ../../../chapters/1-concepts/3-bit_depths/python.md:34
msgid ""
"ImageJ is focussed on on 8-bit and 16-bit unsigned integer images, as well "
"as 32-bit floating point images."
msgstr ""
"ImageJ é focado em imagens inteiras não assinadas de 8 e 16 bits, bem como "
"em imagens de ponto flutuante de 32 bits."

#: ../../../chapters/1-concepts/3-bit_depths/python.md:36
msgid ""
"NumPy, on the other hand, offers a much wider range of data types. The code "
"for a Numpy dtype isn't hard to crack, with a `uint` standing for 'unsigned "
"integer' and `float` for floating-point."
msgstr ""
"O NumPy, por outro lado, oferece uma gama muito mais ampla de tipos de "
"dados. O código para um dtype Numpy não é difícil de decifrar, com `uint` "
"significando 'inteiro não assinado' e `float` para ponto flutuante."

#: ../../../chapters/1-concepts/3-bit_depths/python.md:0
msgid "Type"
msgstr "Tipo"

#: ../../../chapters/1-concepts/3-bit_depths/python.md:0
msgid "Bit-depth"
msgstr "Profundidade de bits"

#: ../../../chapters/1-concepts/3-bit_depths/python.md:0
msgid "dtype"
msgstr "tipo d"

#: ../../../chapters/1-concepts/3-bit_depths/python.md:0
#: ../../../chapters/1-concepts/3-bit_depths/python.md:0
#: ../../../chapters/1-concepts/3-bit_depths/python.md:0
msgid "Unsigned integer"
msgstr "Inteiro não assinado"

#: ../../../chapters/1-concepts/3-bit_depths/python.md:0
#: ../../../chapters/1-concepts/3-bit_depths/python.md:0
msgid "8"
msgstr "8"

#: ../../../chapters/1-concepts/3-bit_depths/python.md:0
msgid "`uint8`"
msgstr "`uint8`"

#: ../../../chapters/1-concepts/3-bit_depths/python.md:0
#: ../../../chapters/1-concepts/3-bit_depths/python.md:0
#: ../../../chapters/1-concepts/3-bit_depths/python.md:0
msgid "Signed integer"
msgstr "Inteiro assinado"

#: ../../../chapters/1-concepts/3-bit_depths/python.md:0
msgid "`int8`"
msgstr "`int8`"

#: ../../../chapters/1-concepts/3-bit_depths/python.md:0
#: ../../../chapters/1-concepts/3-bit_depths/python.md:0
msgid "16"
msgstr "16"

#: ../../../chapters/1-concepts/3-bit_depths/python.md:0
msgid "`uint16`"
msgstr "`uint16`"

#: ../../../chapters/1-concepts/3-bit_depths/python.md:0
msgid "`int16`"
msgstr "`int16`"

#: ../../../chapters/1-concepts/3-bit_depths/python.md:0
#: ../../../chapters/1-concepts/3-bit_depths/python.md:0
#: ../../../chapters/1-concepts/3-bit_depths/python.md:0
msgid "32"
msgstr "32"

#: ../../../chapters/1-concepts/3-bit_depths/python.md:0
msgid "`uint32`"
msgstr "`uint32`"

#: ../../../chapters/1-concepts/3-bit_depths/python.md:0
msgid "`int32`"
msgstr "`int32`"

#: ../../../chapters/1-concepts/3-bit_depths/python.md:0
#: ../../../chapters/1-concepts/3-bit_depths/python.md:0
msgid "Floating point"
msgstr "Ponto flutuante"

#: ../../../chapters/1-concepts/3-bit_depths/python.md:0
msgid "`float32`"
msgstr "`float32`"

#: ../../../chapters/1-concepts/3-bit_depths/python.md:0
msgid "64"
msgstr "64"

#: ../../../chapters/1-concepts/3-bit_depths/python.md:0
msgid "`float64`"
msgstr "`float64`"

#: ../../../chapters/1-concepts/3-bit_depths/python.md:50
msgid "The `dtype` for any array is easy to check:"
msgstr "O `dtype` para qualquer array é fácil de verificar:"

#: ../../../chapters/1-concepts/3-bit_depths/python.md:58
msgid ""
"We can print some basic statistics, as before. In particular, we can check "
"that the minimum and maximum values fall inside the expected range."
msgstr ""
"Podemos imprimir algumas estatísticas básicas, como antes. Em particular, "
"podemos verificar se os valores mínimo e máximo estão dentro do intervalo "
"esperado."

#: ../../../chapters/1-concepts/3-bit_depths/python.md:73
msgid "Fun with float32"
msgstr "Diversão com float32"

#: ../../../chapters/1-concepts/3-bit_depths/python.md:75
msgid "If we want to change the type, that is easy to do as well."
msgstr "Se quisermos alterar o tipo, isso também é fácil de fazer."

#: ../../../chapters/1-concepts/3-bit_depths/python.md:77
msgid ""
"This makes use of the line `import numpy as np` to give us access to more "
"NumPy properties & functions."
msgstr ""
"Isso faz uso da linha `import numpy as np` para nos dar acesso a mais "
"propriedades e funções do NumPy."

#: ../../../chapters/1-concepts/3-bit_depths/python.md:83
msgid "This should convert our image into 32-bit floating point."
msgstr "Isso deve converter nossa imagem em ponto flutuante de 32 bits."

#: ../../../chapters/1-concepts/3-bit_depths/python.md:85
msgid ""
"However, when trying out a new command it is always a good idea to check it "
"does what was expected. We can do that by showing the image and printing "
"statistics again."
msgstr ""
"Porém, ao experimentar um novo comando é sempre uma boa ideia verificar se "
"ele faz o que era esperado. Podemos fazer isso mostrando a imagem e "
"imprimindo as estatísticas novamente."

#: ../../../chapters/1-concepts/3-bit_depths/python.md:97
msgid ""
"That looks fine to me, but let's be extra careful and have NumPy check if "
"the values are really identical."
msgstr ""
"Isso parece bom para mim, mas vamos ser extremamente cuidadosos e fazer com "
"que o NumPy verifique se os valores são realmente idênticos."

#: ../../../chapters/1-concepts/3-bit_depths/python.md:99
msgid "One way we might do that is with `==`."
msgstr "Uma maneira de fazer isso é com `==`."

#: ../../../chapters/1-concepts/3-bit_depths/python.md:105
msgid ""
"Hmmm, that looks quite convincing - it gives us an image that has either "
"`True` or `False` for every single pixel. But because of the limits of what "
"is printing, it really only shows that the pixels at the corners of our "
"image match."
msgstr ""
"Hmmm, isso parece bastante convincente - nos dá uma imagem que tem `True` ou"
" `False` para cada pixel. Mas devido aos limites do que é impresso, isso "
"realmente mostra apenas que os pixels nos cantos da nossa imagem "
"correspondem."

#: ../../../chapters/1-concepts/3-bit_depths/python.md:108
msgid ""
"If we want to ensure that *all* pixels are the same, we can use `np.all`"
msgstr ""
"Se quisermos garantir que *todos* os pixels sejam iguais, podemos usar "
"`np.all`"

#: ../../../chapters/1-concepts/3-bit_depths/python.md:114
msgid "**Success!**"
msgstr "**Sucesso!**"

#: ../../../chapters/1-concepts/3-bit_depths/python.md:116
msgid ""
"But... skepticism belongs in science - particularly in image analysis - and "
"it's always worth testing things from multiple angles, just in case. So "
"let's check the statistics as well:"
msgstr ""
"Mas... o ceticismo pertence à ciência - particularmente à análise de imagens"
" - e sempre vale a pena testar as coisas de vários ângulos, só para "
"garantir. Então, vamos verificar as estatísticas também:"

#: ../../../chapters/1-concepts/3-bit_depths/python.md:136
msgid "Uh-oh... that was unexpected."
msgstr "Uh-oh... isso foi inesperado."

#: ../../../chapters/1-concepts/3-bit_depths/python.md:138
msgid ""
"**Somehow, we have two images with exactly the same pixel values - and yet "
"they have a different mean value??!**"
msgstr ""
"**De alguma forma, temos duas imagens com exatamente os mesmos valores de "
"pixel - e ainda assim elas têm um valor médio diferente??!**"

#: ../../../chapters/1-concepts/3-bit_depths/python.md:140
msgid ""
"It doesn't seem to make sense. We need to investigate by printing the actual"
" values:"
msgstr ""
"Não parece fazer sentido. Precisamos investigar imprimindo os valores reais:"

#: ../../../chapters/1-concepts/3-bit_depths/python.md:147
msgid ""
"Ok, so the means are actually very very close - and we need to go a long way"
" after the decimal point before there is a difference."
msgstr ""
"Ok, então as médias são na verdade muito próximas - e precisamos percorrer "
"um longo caminho após a vírgula antes que haja uma diferença."

#: ../../../chapters/1-concepts/3-bit_depths/python.md:149
msgid "This is an example of a **precision error**."
msgstr "Este é um exemplo de **erro de precisão**."

#: ../../../chapters/1-concepts/3-bit_depths/python.md:151
msgid ""
"Precisions errors are common when coding, and we need to always be on our "
"guard against them. They can occur in the midst of calculations because "
"intermediate results aren't stored with perfect precision, but rather "
"rounded to a value that is close."
msgstr ""
"Erros de precisão são comuns durante a codificação e precisamos estar sempre"
" atentos contra eles. Eles podem ocorrer no meio de cálculos porque os "
"resultados intermediários não são armazenados com precisão perfeita, mas sim"
" arredondados para um valor próximo."

#: ../../../chapters/1-concepts/3-bit_depths/python.md:154
msgid ""
"This happens both with integer and floating-point types - but of course it "
"is more severe when working with integers. As an illustration using decimal "
"values (since it's harder for most of us to think in binary), let's consider"
" dividing a number by 3 and then multiplying the result by 3. "
"Mathematically, we *should* get the same result."
msgstr ""
"Isso acontece tanto com tipos inteiros quanto com pontos flutuantes - mas é "
"claro que é mais grave quando se trabalha com números inteiros. Como "
"ilustração usando valores decimais (já que é mais difícil para a maioria de "
"nós pensar em binário), vamos considerar dividir um número por 3 e depois "
"multiplicar o resultado por 3. Matematicamente, *deveríamos* obter o mesmo "
"resultado."

#: ../../../chapters/1-concepts/3-bit_depths/python.md:158
msgid ""
"However, if we do our calculations using only with integers we instead see"
msgstr ""
"No entanto, se fizermos nossos cálculos usando apenas números inteiros, "
"veremos"

#: ../../../chapters/1-concepts/3-bit_depths/python.md:160
msgid ""
"\n"
"\\begin{align}\n"
"\\frac{10}{3}  & \\approx 3 \\\\\n"
"\\\\\n"
"3 \\times 3  & = 9\n"
"\\end{align}\n"
msgstr ""
"\n"
"\\begin{align}\n"
"\\frac{10}{3} & \\aproximadamente 3 \\\\\n"
"\\\\\n"
"3 \\vezes 3 & = 9\n"
"\\end{align}\n"

#: ../../../chapters/1-concepts/3-bit_depths/python.md:168
msgid ""
"On the other hand, if we use floating point (to three decimal places for "
"illustration) we would get"
msgstr ""
"Por outro lado, se usarmos ponto flutuante (com três casas decimais para "
"ilustração), obteríamos"

#: ../../../chapters/1-concepts/3-bit_depths/python.md:170
msgid ""
"\n"
"\\begin{align}\n"
"\\frac{10}{3} & \\approx 3.333 \\\\\n"
"\\\\\n"
"3.333 \\times 3 & = 9.999\n"
"\\end{align}\n"
msgstr ""
"\n"
"\\begin{align}\n"
"\\frac{10}{3} & \\aproximadamente 3,333 \\\\\n"
"\\\\\n"
"3,333 \\vezes 3 & = 9,999\n"
"\\end{align}\n"

#: ../../../chapters/1-concepts/3-bit_depths/python.md:178
msgid ""
"*Neither* gives the mathematically 'correct' final result of 10, because of "
"the precision errors."
msgstr ""
"*Nenhum dos dois* fornece o resultado final matematicamente 'correto' de 10,"
" devido aos erros de precisão."

#: ../../../chapters/1-concepts/3-bit_depths/python.md:180
msgid ""
"Consequently, rather than checking whether non-integer values are identical "
"with one another by using `==`, we often need to check if they are very "
"close to one another. We can use `np.allclose` for that."
msgstr ""
"Consequentemente, em vez de verificar se os valores não inteiros são "
"idênticos entre si usando `==`, muitas vezes precisamos verificar se eles "
"estão muito próximos um do outro. Podemos usar `np.allclose` para isso."

#: ../../../chapters/1-concepts/3-bit_depths/python.md:187
msgid "Towards 8-bit"
msgstr "Em direção a 8 bits"

#: ../../../chapters/1-concepts/3-bit_depths/python.md:189
msgid ""
"Previously, we had an image with a low bit depth and we increased the bit-"
"depth. This was fine."
msgstr ""
"Anteriormente, tínhamos uma imagem com profundidade de bits baixa e "
"aumentamos a profundidade de bits. Isso foi bom."

#: ../../../chapters/1-concepts/3-bit_depths/python.md:192
msgid "Time now to go the opposite direction, and again check that it works."
msgstr ""
"Agora é hora de ir na direção oposta e verificar novamente se funciona."

#: ../../../chapters/1-concepts/3-bit_depths/python.md:205
msgid "Oh dear. This is categorically **not** all right."
msgstr "Oh céus. Isso categoricamente **não** está certo."

#: ../../../chapters/1-concepts/3-bit_depths/python.md:208
msgid ""
"Our minimum and maximum values are in the range 0-255 - which is all that's "
"permitted in an unsigned integer, 8-bit image, so that makes sense. But the "
"appearance doesn't make much sense at first look."
msgstr ""
"Nossos valores mínimo e máximo estão no intervalo de 0 a 255 - que é tudo o "
"que é permitido em um número inteiro não assinado, imagem de 8 bits, então "
"faz sentido. Mas a aparência não faz muito sentido à primeira vista."

#: ../../../chapters/1-concepts/3-bit_depths/python.md:211
msgid ""
"Whenever we reduce the bit-depth of an image, we know that the pixel values "
"will need to fit into the new range. In the main text, we considered two "
"ways that could happen: by clipping or by rescaling."
msgstr ""
"Sempre que reduzimos a profundidade de bits de uma imagem, sabemos que os "
"valores dos pixels precisarão se ajustar ao novo intervalo. No texto "
"principal, consideramos duas formas de isso acontecer: por recorte ou por "
"redimensionamento."

#: ../../../chapters/1-concepts/3-bit_depths/python.md:214
msgid ""
"Here, we are meeting a slight idiosyncracy of NumPy that we really need to "
"be careful about: *by default, it will neither clip nor rescale!*"
msgstr ""
"Aqui, estamos encontrando uma ligeira idiossincrasia do NumPy com a qual "
"realmente precisamos ter cuidado: *por padrão, ele não irá cortar nem "
"redimensionar!*"

#: ../../../chapters/1-concepts/3-bit_depths/python.md:216
msgid ""
"But what *does* it do? Rather than googling or crawling around the NumPy "
"docs, we can experiment."
msgstr ""
"Mas o que isso faz? Em vez de pesquisar no Google ou vasculhar os documentos"
" do NumPy, podemos experimentar."

#: ../../../chapters/1-concepts/3-bit_depths/python.md:247
msgid ""
"So it seems that NumPy *wraps around*: when converting 256 to `uint8` it "
"becomes 0, 257 becomes 1 and so on."
msgstr ""
"Então parece que o NumPy *contorna*: ao converter 256 para `uint8` torna-se "
"0, 257 torna-se 1 e assim por diante."

#: ../../../chapters/1-concepts/3-bit_depths/python.md:249
msgid ""
"This means that, to convert an image to `uint8`, we need to take matters "
"into our own hands to reduce data loss. To begin, let's clip."
msgstr ""
"Isso significa que, para converter uma imagem para `uint8`, precisamos "
"resolver o problema com nossas próprias mãos para reduzir a perda de dados. "
"Para começar, vamos recortar."

#: ../../../chapters/1-concepts/3-bit_depths/python.md:254
msgid "Converting with clipping"
msgstr "Convertendo com recorte"

#: ../../../chapters/1-concepts/3-bit_depths/python.md:256
msgid ""
"The trick is to clip the image this *before* converting it with `astype`:"
msgstr "O truque é recortar a imagem *antes* de convertê-la com `astype`:"

#: ../../../chapters/1-concepts/3-bit_depths/python.md:270
msgid ""
"This has worked in a sense, but not a very good one. Our pixels are in the "
"range 0-255, but recall from the histogram above that almost all the pixels "
"were originally above 255 in value. When we clipped, these pixels all simply"
" became 255 - and all further distinction was lost."
msgstr ""
"Isso funcionou em certo sentido, mas não muito bom. Nossos pixels estão na "
"faixa de 0 a 255, mas lembre-se do histograma acima que quase todos os "
"pixels estavam originalmente acima de 255 em valor. Quando cortamos, todos "
"esses pixels simplesmente tornaram-se 255 - e toda a distinção adicional foi"
" perdida."

#: ../../../chapters/1-concepts/3-bit_depths/python.md:276
msgid "Converting with rescaling"
msgstr "Convertendo com redimensionamento"

#: ../../../chapters/1-concepts/3-bit_depths/python.md:278
msgid ""
"We can calculate the maximum possible value of an unsigned integer for a "
"specific bit depth $N$ as $2^{N}-1$."
msgstr ""
"Podemos calcular o valor máximo possível de um número inteiro sem sinal para"
" uma profundidade de bits específica $N$ como $2^{N}-1$."

#: ../../../chapters/1-concepts/3-bit_depths/python.md:280
msgid "With Numpy, we can use the `**` operator for this."
msgstr "Com Numpy, podemos usar o operador `**` para isso."

#: ../../../chapters/1-concepts/3-bit_depths/python.md:290
msgid ""
"Therefore, to convert our 16-bit image to 8-bit by rescaling, we could "
"multiply the pixel values by the ratio of these maximum values, i.e. by "
"$\\frac{255}{65535}$"
msgstr ""
"Portanto, para converter nossa imagem de 16 bits em 8 bits por "
"redimensionamento, poderíamos multiplicar os valores dos pixels pela "
"proporção desses valores máximos, ou seja, por $\\frac{255}{65535}$"

#: ../../../chapters/1-concepts/3-bit_depths/python.md:305
msgid ""
"This has *kind of* worked, but note that the maximum pixel value is very "
"low. We have lost a *lot* of information: squeezing our values into a very "
"small range of integers, much less than the full 256 available to us."
msgstr ""
"Isso *meio que* funcionou, mas observe que o valor máximo do pixel é muito "
"baixo. Perdemos *muita* informação: comprimindo nossos valores em um "
"intervalo muito pequeno de números inteiros, muito menos do que os 256 "
"completos disponíveis para nós."

#: ../../../chapters/1-concepts/3-bit_depths/python.md:308
msgid ""
"Ideally, we would usually like to rescale our image while preserving as much"
" of the information as possible. We would like the values in our output "
"image to fill the full range of 0-255."
msgstr ""
"Idealmente, normalmente gostaríamos de redimensionar nossa imagem "
"preservando o máximo de informações possível. Gostaríamos que os valores em "
"nossa imagem de saída preenchessem todo o intervalo de 0 a 255."

#: ../../../chapters/1-concepts/3-bit_depths/python.md:311
msgid "We can do this in five steps:"
msgstr "Podemos fazer isso em cinco etapas:"

#: ../../../chapters/1-concepts/3-bit_depths/python.md:312
msgid ""
"Convert the image to floating point (so that we don't lose info to rounding)"
msgstr ""
"Converta a imagem em ponto flutuante (para não perdermos informações devido "
"ao arredondamento)"

#: ../../../chapters/1-concepts/3-bit_depths/python.md:313
msgid "Subtract the minimum value, so that the minimum becomes zero"
msgstr "Subtraia o valor mínimo, para que o mínimo se torne zero"

#: ../../../chapters/1-concepts/3-bit_depths/python.md:314
msgid "Divide by the new maximum value, so that the maximum becomes one"
msgstr "Divida pelo novo valor máximo, para que o máximo se torne um"

#: ../../../chapters/1-concepts/3-bit_depths/python.md:315
msgid "Multiply by 255"
msgstr "Multiplique por 255"

#: ../../../chapters/1-concepts/3-bit_depths/python.md:316
msgid "Convert to 8-bit"
msgstr "Converter para 8 bits"

#: ../../../chapters/1-concepts/3-bit_depths/python.md:334
msgid ""
"As conversions to 8-bit go, rescaling certainly looks like it was more "
"successful than simply clipping, and the output fills the full range "
"available."
msgstr ""
"À medida que as conversões para 8 bits avançam, o redimensionamento "
"certamente parece ter sido mais bem-sucedido do que simplesmente recortar, e"
" a saída preenche toda a gama disponível."

#: ../../../chapters/1-concepts/3-bit_depths/python.md:336
msgid ""
"Nevertheless, **don't forget that the statistics are different, and we have "
"changed the pixel values!**"
msgstr ""
"No entanto, **não se esqueça que as estatísticas são diferentes e alteramos "
"os valores dos pixels!**"

#: ../../../chapters/1-concepts/3-bit_depths/python.md:338
msgid ""
"Therefore this isn't something we should do without a very good reason."
msgstr "Portanto, isso não é algo que devemos fazer sem uma boa razão."

#: ../../../chapters/1-concepts/3-bit_depths/python.md:342
msgid "Summary"
msgstr "Resumo"

#: ../../../chapters/1-concepts/3-bit_depths/python.md:344
msgid ""
"**The key message here is that it is very easy to change the bit-depth and "
"type of an image - but also very easy for things to go wrong.**"
msgstr ""
"**A principal mensagem aqui é que é muito fácil alterar a profundidade de "
"bits e o tipo de uma imagem - mas também é muito fácil que algo dê errado.**"

#: ../../../chapters/1-concepts/3-bit_depths/python.md:346
msgid ""
"Sometimes these are small precision errors. Sometimes they are big, data, "
"destroying errors."
msgstr ""
"Às vezes, esses são pequenos erros de precisão. Às vezes eles são grandes, "
"dados, destruindo erros."

#: ../../../chapters/1-concepts/3-bit_depths/python.md:349
msgid ""
"But if you know how to show images, make measurements and generate "
"histograms, you can always check what is happening to the data at each step."
" This can help you make sure nothing is being lost along the way."
msgstr ""
"Mas se você souber mostrar imagens, fazer medições e gerar histogramas, "
"poderá sempre verificar o que está acontecendo com os dados em cada etapa. "
"Isso pode ajudá-lo a garantir que nada seja perdido ao longo do caminho."
